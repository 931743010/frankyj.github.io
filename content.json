{"meta":{"title":"zuoyang's blog","subtitle":null,"description":"welcome to my blog","author":"zuoyang","url":"https://www.zuoyangblog.com"},"pages":[{"title":"","date":"2018-11-15T14:56:49.000Z","updated":"2018-11-15T14:56:49.000Z","comments":true,"path":"about/index.html","permalink":"https://www.zuoyangblog.com/about/index.html","excerpt":"","text":"hi,大家好！欢迎大家来到我的blog，希望以后能跟各位大佬一起学习进步。 我叫左杨，目前就职于蚂蚁金服人工智能部，从事于蚂蚁人工智能相关的开发工作，对Machine Learning，Deep Learning比较感兴趣。"},{"title":"Categories","date":"2018-11-15T14:56:49.000Z","updated":"2018-11-15T14:56:49.000Z","comments":true,"path":"categories/index.html","permalink":"https://www.zuoyangblog.com/categories/index.html","excerpt":"","text":""},{"title":"Tags","date":"2018-11-15T14:56:49.000Z","updated":"2018-11-15T14:56:49.000Z","comments":true,"path":"tags/index.html","permalink":"https://www.zuoyangblog.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Convolutional Neural Networks: Step by Step","slug":"Convolutional-Neural-Networks-Step-by-Step","date":"2018-11-15T15:01:15.000Z","updated":"2018-11-15T15:13:18.000Z","comments":true,"path":"post/f9118633.html","link":"","permalink":"https://www.zuoyangblog.com/post/f9118633.html","excerpt":"","text":"各位好,这是deepLearning AI Course4 week1的作业1Welcome to Course 4’s first assignment! In this assignment, you will implement convolutional (CONV) and pooling (POOL) layers in numpy, including both forward propagation and (optionally) backward propagation. Notation: Superscript $[l]$ denotes an object of the $l^{th}$ layer. Example: $a^{[4]}$ is the $4^{th}$ layer activation. $W^{[5]}$ and $b^{[5]}$ are the $5^{th}$ layer parameters. Superscript $(i)$ denotes an object from the $i^{th}$ example. Example: $x^{(i)}$ is the $i^{th}$ training example input. Lowerscript $i$ denotes the $i^{th}$ entry of a vector. Example: $a^{[l]}_i$ denotes the $i^{th}$ entry of the activations in layer $l$, assuming this is a fully connected (FC) layer. $n_H$, $n_W$ and $n_C$ denote respectively the height, width and number of channels of a given layer. If you want to reference a specific layer $l$, you can also write $n_H^{[l]}$, $n_W^{[l]}$, $n_C^{[l]}$. $n_{H_{prev}}$, $n_{W_{prev}}$ and $n_{C_{prev}}$ denote respectively the height, width and number of channels of the previous layer. If referencing a specific layer $l$, this could also be denoted $n_H^{[l-1]}$, $n_W^{[l-1]}$, $n_C^{[l-1]}$. We assume that you are already familiar with numpy and/or have completed the previous courses of the specialization. Let’s get started! 1 - PackagesLet’s first import all the packages that you will need during this assignment. numpy is the fundamental package for scientific computing with Python. matplotlib is a library to plot graphs in Python. np.random.seed(1) is used to keep all the random function calls consistent. It will help us grade your work. 12345678910111213import numpy as npimport h5pyimport matplotlib.pyplot as plt%matplotlib inlineplt.rcParams['figure.figsize'] = (5.0, 4.0) # set default size of plotsplt.rcParams['image.interpolation'] = 'nearest'plt.rcParams['image.cmap'] = 'gray'%load_ext autoreload%autoreload 2np.random.seed(1) 2 - Outline of the AssignmentYou will be implementing the building blocks of a convolutional neural network! Each function you will implement will have detailed instructions that will walk you through the steps needed: Convolution functions, including: Zero Padding Convolve window Convolution forward Convolution backward (optional) Pooling functions, including: Pooling forward Create mask Distribute value Pooling backward (optional) This notebook will ask you to implement these functions from scratch in numpy. In the next notebook, you will use the TensorFlow equivalents of these functions to build the following model: Note that for every forward function, there is its corresponding backward equivalent. Hence, at every step of your forward module you will store some parameters in a cache. These parameters are used to compute gradients during backpropagation. 3 - Convolutional Neural NetworksAlthough programming frameworks make convolutions easy to use, they remain one of the hardest concepts to understand in Deep Learning. A convolution layer transforms an input volume into an output volume of different size, as shown below.In this part, you will build every step of the convolution layer. You will first implement two helper functions: one for zero padding and the other for computing the convolution function itself. 3.1 - Zero-PaddingZero-padding adds zeros around the border of an image: Figure 1 : Zero-Padding Image (3 channels, RGB) with a padding of 2. The main benefits of padding are the following: It allows you to use a CONV layer without necessarily shrinking the height and width of the volumes. This is important for building deeper networks, since otherwise the height/width would shrink as you go to deeper layers. An important special case is the “same” convolution, in which the height/width is exactly preserved after one layer. It helps us keep more of the information at the border of an image. Without padding, very few values at the next layer would be affected by pixels as the edges of an image. Exercise: Implement the following function, which pads all the images of a batch of examples X with zeros. Use np.pad. Note if you want to pad the array “a” of shape $(5,5,5,5,5)$ with pad = 1 for the 2nd dimension, pad = 3 for the 4th dimension and pad = 0 for the rest, you would do:1a = np.pad(a, ((0,0), (1,1), (0,0), (3,3), (0,0)), 'constant', constant_values = (..,..)) 1234567891011121314151617181920# GRADED FUNCTION: zero_paddef zero_pad(X, pad): \"\"\" Pad with zeros all images of the dataset X. The padding is applied to the height and width of an image, as illustrated in Figure 1. Argument: X -- python numpy array of shape (m, n_H, n_W, n_C) representing a batch of m images pad -- integer, amount of padding around each image on vertical and horizontal dimensions Returns: X_pad -- padded image of shape (m, n_H + 2*pad, n_W + 2*pad, n_C) \"\"\" ### START CODE HERE ### (≈ 1 line) X_pad = np.pad(X,((0,0),(pad,pad),(pad,pad),(0,0)),'constant',constant_values = 0) ### END CODE HERE ### return X_pad 12345678910111213np.random.seed(1)x = np.random.randn(4, 3, 3, 2)x_pad = zero_pad(x, 2)print (\"x.shape =\", x.shape)print (\"x_pad.shape =\", x_pad.shape)print (\"x[1,1] =\", x[1,1])print (\"x_pad[1,1] =\", x_pad[1,1])fig, axarr = plt.subplots(1, 2)axarr[0].set_title('x')axarr[0].imshow(x[0,:,:,0])axarr[1].set_title('x_pad')axarr[1].imshow(x_pad[0,:,:,0]) Expected Output: x.shape: (4, 3, 3, 2) x_pad.shape: (4, 7, 7, 2) x[1,1]: [[ 0.90085595 -0.68372786] [-0.12289023 -0.93576943] [-0.26788808 0.53035547]] x_pad[1,1]: [[ 0. 0.] [ 0. 0.] [ 0. 0.] [ 0. 0.] [ 0. 0.] [ 0. 0.] [ 0. 0.]] ### 3.2 - Single step of convolutionIn this part, implement a single step of convolution, in which you apply the filter to a single position of the input. This will be used to build a convolutional unit, which:- Takes an input volume- Applies a filter at every position of the input- Outputs another volume (usually of different size) Figure 2 : Convolution operation with a filter of 2x2 and a stride of 1 (stride = amount you move the window each time you slide) In a computer vision application, each value in the matrix on the left corresponds to a single pixel value, and we convolve a 3x3 filter with the image by multiplying its values element-wise with the original matrix, then summing them up and adding a bias. In this first step of the exercise, you will implement a single step of convolution, corresponding to applying a filter to just one of the positions to get a single real-valued output.Later in this notebook, you’ll apply this function to multiple positions of the input to implement the full convolutional operation.Exercise: Implement conv_single_step(). Hint.1234567891011121314151617181920212223242526# GRADED FUNCTION: conv_single_stepdef conv_single_step(a_slice_prev, W, b): \"\"\" Apply one filter defined by parameters W on a single slice (a_slice_prev) of the output activation of the previous layer. Arguments: a_slice_prev -- slice of input data of shape (f, f, n_C_prev) W -- Weight parameters contained in a window - matrix of shape (f, f, n_C_prev) b -- Bias parameters contained in a window - matrix of shape (1, 1, 1) Returns: Z -- a scalar value, result of convolving the sliding window (W, b) on a slice x of the input data \"\"\" ### START CODE HERE ### (≈ 2 lines of code) # Element-wise product between a_slice and W. Do not add the bias yet. s = a_slice_prev * W # Sum over all entries of the volume s. Z = np.sum(s) # Add bias b to Z. Cast b to a float() so that Z results in a scalar value. Z = Z + float(b) ### END CODE HERE ### return Z1234567np.random.seed(1)a_slice_prev = np.random.randn(4, 4, 3)W = np.random.randn(4, 4, 3)b = np.random.randn(1, 1, 1)Z = conv_single_step(a_slice_prev, W, b)print(\"Z =\", Z)Expected Output: Z -6.99908945068 ### 3.3 - Convolutional Neural Networks - Forward passIn the forward pass, you will take many filters and convolve them on the input. Each ‘convolution’ gives you a 2D matrix output. You will then stack these outputs to get a 3D volume:Exercise: Implement the function below to convolve the filters W on an input activation A_prev. This function takes as input A_prev, the activations output by the previous layer (for a batch of m inputs), F filters/weights denoted by W, and a bias vector denoted by b, where each filter has its own (single) bias. Finally you also have access to the hyperparameters dictionary which contains the stride and the padding.Hint:1. To select a 2x2 slice at the upper left corner of a matrix “a_prev” (shape (5,5,3)), you would do:1a_slice_prev = a_prev[0:2,0:2,:]This will be useful when you will define a_slice_prev below, using the start/end indexes you will define.2. To define a_slice you will need to first define its corners vert_start, vert_end, horiz_start and horiz_end. This figure may be helpful for you to find how each of the corner can be defined using h, w, f and s in the code below. Figure 3 : Definition of a slice using vertical and horizontal start/end (with a 2x2 filter) This figure shows only a single channel. Reminder:The formulas relating the output shape of the convolution to the input shape is:$$ n_H = \\lfloor \\frac{n_{H_{prev}} - f + 2 \\times pad}{stride} \\rfloor +1 $$$$ n_W = \\lfloor \\frac{n_{W_{prev}} - f + 2 \\times pad}{stride} \\rfloor +1 $$$$ n_C = \\text{number of filters used in the convolution}$$For this exercise, we won’t worry about vectorization, and will just implement everything with for-loops.1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465# GRADED FUNCTION: conv_forwarddef conv_forward(A_prev, W, b, hparameters): \"\"\" Implements the forward propagation for a convolution function Arguments: A_prev -- output activations of the previous layer, numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev) W -- Weights, numpy array of shape (f, f, n_C_prev, n_C) b -- Biases, numpy array of shape (1, 1, 1, n_C) hparameters -- python dictionary containing \"stride\" and \"pad\" Returns: Z -- conv output, numpy array of shape (m, n_H, n_W, n_C) cache -- cache of values needed for the conv_backward() function \"\"\" ### START CODE HERE ### # Retrieve dimensions from A_prev's shape (≈1 line) (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape # Retrieve dimensions from W's shape (≈1 line) (f, f, n_C_prev, n_C) = W.shape # Retrieve information from \"hparameters\" (≈2 lines) stride = hparameters['stride'] pad = hparameters['pad'] # Compute the dimensions of the CONV output volume using the formula given above. Hint: use int() to floor. (≈2 lines) n_H = int((n_H_prev + 2 * pad - f) / stride) + 1 n_W = int((n_W_prev + 2 * pad - f) / stride) + 1 # Initialize the output volume Z with zeros. (≈1 line) Z = np.zeros((m,n_H,n_W,n_C)) # Create A_prev_pad by padding A_prev A_prev_pad = zero_pad(A_prev,pad) for i in range(m): # loop over the batch of training examples a_prev_pad = A_prev_pad[i] # Select ith training example's padded activation for h in range(0,n_H): # loop over vertical axis of the output volume for w in range(0,n_W): # loop over horizontal axis of the output volume for c in range(n_C): # loop over channels (= #filters) of the output volume # Find the corners of the current \"slice\" (≈4 lines) vert_start = h * stride vert_end = vert_start + f horiz_start = w *stride horiz_end = horiz_start + f # Use the corners to define the (3D) slice of a_prev_pad (See Hint above the cell). (≈1 line) a_slice_prev = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:] # Convolve the (3D) slice with the correct filter W and bias b, to get back one output neuron. (≈1 line) Z[i, h, w, c] = conv_single_step(a_slice_prev,W[:,:,:,c],b[:,:,:,c]) ### END CODE HERE ### # Making sure your output shape is correct assert(Z.shape == (m, n_H, n_W, n_C)) # Save information in \"cache\" for the backprop cache = (A_prev, W, b, hparameters) return Z, cache1234567891011np.random.seed(1)A_prev = np.random.randn(10,4,4,3)W = np.random.randn(2,2,3,8)b = np.random.randn(1,1,1,8)hparameters = &#123;\"pad\" : 2, \"stride\": 2&#125;Z, cache_conv = conv_forward(A_prev, W, b, hparameters)print(\"Z's mean =\", np.mean(Z))print(\"Z[3,2,1] =\", Z[3,2,1])print(\"cache_conv[0][1][2][3] =\", cache_conv[0][1][2][3])Expected Output: Z’s mean 0.0489952035289 Z[3,2,1] [-0.61490741 -6.7439236 -2.55153897 1.75698377 3.56208902 0.53036437 5.18531798 8.75898442] cache_conv[0][1][2][3] [-0.20075807 0.18656139 0.41005165] Finally, CONV layer should also contain an activation, in which case we would add the following line of code: 1234# Convolve the window to get back one output neuronZ[i, h, w, c] = ...# Apply activationA[i, h, w, c] = activation(Z[i, h, w, c]) You don’t need to do it here. 4 - Pooling layerThe pooling (POOL) layer reduces the height and width of the input. It helps reduce computation, as well as helps make feature detectors more invariant to its position in the input. The two types of pooling layers are: Max-pooling layer: slides an ($f, f$) window over the input and stores the max value of the window in the output. Average-pooling layer: slides an ($f, f$) window over the input and stores the average value of the window in the output. These pooling layers have no parameters for backpropagation to train. However, they have hyperparameters such as the window size $f$. This specifies the height and width of the fxf window you would compute a max or average over. 4.1 - Forward PoolingNow, you are going to implement MAX-POOL and AVG-POOL, in the same function. Exercise: Implement the forward pass of the pooling layer. Follow the hints in the comments below. Reminder:As there’s no padding, the formulas binding the output shape of the pooling to the input shape is:$$ n_H = \\lfloor \\frac{n_{H_{prev}} - f}{stride} \\rfloor +1 $$$$ n_W = \\lfloor \\frac{n_{W_{prev}} - f}{stride} \\rfloor +1 $$$$ n_C = n_{C_{prev}}$$ 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061# GRADED FUNCTION: pool_forwarddef pool_forward(A_prev, hparameters, mode = \"max\"): \"\"\" Implements the forward pass of the pooling layer Arguments: A_prev -- Input data, numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev) hparameters -- python dictionary containing \"f\" and \"stride\" mode -- the pooling mode you would like to use, defined as a string (\"max\" or \"average\") Returns: A -- output of the pool layer, a numpy array of shape (m, n_H, n_W, n_C) cache -- cache used in the backward pass of the pooling layer, contains the input and hparameters \"\"\" # Retrieve dimensions from the input shape (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape # Retrieve hyperparameters from \"hparameters\" f = hparameters[\"f\"] stride = hparameters[\"stride\"] # Define the dimensions of the output n_H = int(1 + (n_H_prev - f) / stride) n_W = int(1 + (n_W_prev - f) / stride) n_C = n_C_prev # Initialize output matrix A A = np.zeros((m, n_H, n_W, n_C)) ### START CODE HERE ### for i in range(m): # loop over the training examples for h in range(n_H): # loop on the vertical axis of the output volume for w in range(n_W): # loop on the horizontal axis of the output volume for c in range (n_C): # loop over the channels of the output volume # Find the corners of the current \"slice\" (≈4 lines) vert_start = h * stride vert_end = vert_start + f horiz_start = w * stride horiz_end = horiz_start + f # Use the corners to define the current slice on the ith training example of A_prev, channel c. (≈1 line) a_prev_slice = A_prev[i,vert_start:vert_end,horiz_start:horiz_end,c] # Compute the pooling operation on the slice. Use an if statment to differentiate the modes. Use np.max/np.mean. if mode == \"max\": A[i, h, w, c] = np.max(a_prev_slice) elif mode == \"average\": A[i, h, w, c] = np.average(a_prev_slice) ### END CODE HERE ### # Store the input and hparameters in \"cache\" for pool_backward() cache = (A_prev, hparameters) # Making sure your output shape is correct assert(A.shape == (m, n_H, n_W, n_C)) return A, cache 1234567891011np.random.seed(1)A_prev = np.random.randn(2, 4, 4, 3)hparameters = &#123;\"stride\" : 2, \"f\": 3&#125;A, cache = pool_forward(A_prev, hparameters)print(\"mode = max\")print(\"A =\", A)print()A, cache = pool_forward(A_prev, hparameters, mode = \"average\")print(\"mode = average\")print(\"A =\", A) Expected Output: A = [[[[ 1.74481176 0.86540763 1.13376944]]] [[[ 1.13162939 1.51981682 2.18557541]]]] A = [[[[ 0.02105773 -0.20328806 -0.40389855]]] [[[-0.22154621 0.51716526 0.48155844]]]] Congratulations! You have now implemented the forward passes of all the layers of a convolutional network. The remainer of this notebook is optional, and will not be graded. 5 - Backpropagation in convolutional neural networks (OPTIONAL / UNGRADED)In modern deep learning frameworks, you only have to implement the forward pass, and the framework takes care of the backward pass, so most deep learning engineers don’t need to bother with the details of the backward pass. The backward pass for convolutional networks is complicated. If you wish however, you can work through this optional portion of the notebook to get a sense of what backprop in a convolutional network looks like. When in an earlier course you implemented a simple (fully connected) neural network, you used backpropagation to compute the derivatives with respect to the cost to update the parameters. Similarly, in convolutional neural networks you can to calculate the derivatives with respect to the cost in order to update the parameters. The backprop equations are not trivial and we did not derive them in lecture, but we briefly presented them below. 5.1 - Convolutional layer backward passLet’s start by implementing the backward pass for a CONV layer. 5.1.1 - Computing dA:This is the formula for computing $dA$ with respect to the cost for a certain filter $W_c$ and a given training example: $$ dA += \\sum _{h=0} ^{n_H} \\sum_{w=0} ^{n_W} W_c \\times dZ_{hw} \\tag{1}$$ Where $W_c$ is a filter and $dZ_{hw}$ is a scalar corresponding to the gradient of the cost with respect to the output of the conv layer Z at the hth row and wth column (corresponding to the dot product taken at the ith stride left and jth stride down). Note that at each time, we multiply the the same filter $W_c$ by a different dZ when updating dA. We do so mainly because when computing the forward propagation, each filter is dotted and summed by a different a_slice. Therefore when computing the backprop for dA, we are just adding the gradients of all the a_slices. In code, inside the appropriate for-loops, this formula translates into:1da_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] += W[:,:,:,c] * dZ[i, h, w, c] 5.1.2 - Computing dW:This is the formula for computing $dW_c$ ($dW_c$ is the derivative of one filter) with respect to the loss: $$ dW_c += \\sum _{h=0} ^{n_H} \\sum_{w=0} ^ {n_W} a_{slice} \\times dZ_{hw} \\tag{2}$$ Where $a_{slice}$ corresponds to the slice which was used to generate the acitivation $Z_{ij}$. Hence, this ends up giving us the gradient for $W$ with respect to that slice. Since it is the same $W$, we will just add up all such gradients to get $dW$. In code, inside the appropriate for-loops, this formula translates into:1dW[:,:,:,c] += a_slice * dZ[i, h, w, c] 5.1.3 - Computing db:This is the formula for computing $db$ with respect to the cost for a certain filter $W_c$: $$ db = \\sum_h \\sum_w dZ_{hw} \\tag{3}$$ As you have previously seen in basic neural networks, db is computed by summing $dZ$. In this case, you are just summing over all the gradients of the conv output (Z) with respect to the cost. In code, inside the appropriate for-loops, this formula translates into:1db[:,:,:,c] += dZ[i, h, w, c] Exercise: Implement the conv_backward function below. You should sum over all the training examples, filters, heights, and widths. You should then compute the derivatives using formulas 1, 2 and 3 above. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475def conv_backward(dZ, cache): \"\"\" Implement the backward propagation for a convolution function Arguments: dZ -- gradient of the cost with respect to the output of the conv layer (Z), numpy array of shape (m, n_H, n_W, n_C) cache -- cache of values needed for the conv_backward(), output of conv_forward() Returns: dA_prev -- gradient of the cost with respect to the input of the conv layer (A_prev), numpy array of shape (m, n_H_prev, n_W_prev, n_C_prev) dW -- gradient of the cost with respect to the weights of the conv layer (W) numpy array of shape (f, f, n_C_prev, n_C) db -- gradient of the cost with respect to the biases of the conv layer (b) numpy array of shape (1, 1, 1, n_C) \"\"\" ### START CODE HERE ### # Retrieve information from \"cache\" (A_prev, W, b, hparameters) = cache # Retrieve dimensions from A_prev's shape (m, n_H_prev, n_W_prev, n_C_prev) = A_prev.shape # Retrieve dimensions from W's shape (f, f, n_C_prev, n_C) = W.shape # Retrieve information from \"hparameters\" stride = hparameters['stride'] pad = hparameters['pad'] # Retrieve dimensions from dZ's shape (m, n_H, n_W, n_C) = dZ.shape # Initialize dA_prev, dW, db with the correct shapes dA_prev = np.zeros(A_prev.shape) dW = np.zeros(W.shape) db = np.zeros(b.shape) # Pad A_prev and dA_prev A_prev_pad = zero_pad(A_prev,pad) dA_prev_pad = zero_pad(dA_prev,pad) for i in range(m): # loop over the training examples # select ith training example from A_prev_pad and dA_prev_pad a_prev_pad = A_prev_pad[i] da_prev_pad = dA_prev_pad[i] for h in range(n_H): # loop over vertical axis of the output volume for w in range(n_W): # loop over horizontal axis of the output volume for c in range(n_C): # loop over the channels of the output volume # Find the corners of the current \"slice\" vert_start = h * stride vert_end = vert_start + f horiz_start = w * stride horiz_end = horiz_start + f # Use the corners to define the slice from a_prev_pad a_slice = a_prev_pad[vert_start:vert_end,horiz_start:horiz_end,:] # Update gradients for the window and the filter's parameters using the code formulas given above da_prev_pad[vert_start:vert_end, horiz_start:horiz_end, :] += W[:,:,:,c] * dZ[i, h, w, c] dW[:,:,:,c] += a_slice * dZ[i, h, w, c] db[:,:,:,c] += dZ[i, h, w, c] # Set the ith training example's dA_prev to the unpaded da_prev_pad (Hint: use X[pad:-pad, pad:-pad, :]) dA_prev[i, :, :, :] = da_prev_pad[pad:-pad,pad:-pad,:] ### END CODE HERE ### # Making sure your output shape is correct assert(dA_prev.shape == (m, n_H_prev, n_W_prev, n_C_prev)) return dA_prev, dW, db 12345np.random.seed(1)dA, dW, db = conv_backward(Z, cache_conv)print(\"dA_mean =\", np.mean(dA))print(\"dW_mean =\", np.mean(dW))print(\"db_mean =\", np.mean(db)) Expected Output: dA_mean 1.45243777754 dW_mean 1.72699145831 db_mean 7.83923256462 ## 5.2 Pooling layer - backward passNext, let’s implement the backward pass for the pooling layer, starting with the MAX-POOL layer. Even though a pooling layer has no parameters for backprop to update, you still need to backpropagation the gradient through the pooling layer in order to compute gradients for layers that came before the pooling layer.### 5.2.1 Max pooling - backward passBefore jumping into the backpropagation of the pooling layer, you are going to build a helper function called create_mask_from_window() which does the following:$$ X = \\begin{bmatrix}1 &amp;&amp; 3 \\4 &amp;&amp; 2\\end{bmatrix} \\quad \\rightarrow \\quad M =\\begin{bmatrix}0 &amp;&amp; 0 \\1 &amp;&amp; 0\\end{bmatrix}\\tag{4}$$As you can see, this function creates a “mask” matrix which keeps track of where the maximum of the matrix is. True (1) indicates the position of the maximum in X, the other entries are False (0). You’ll see later that the backward pass for average pooling will be similar to this but using a different mask.Exercise: Implement create_mask_from_window(). This function will be helpful for pooling backward.Hints:- np.max() may be helpful. It computes the maximum of an array.- If you have a matrix X and a scalar x: A = (X == x) will return a matrix A of the same size as X such that:12A[i,j] = True if X[i,j] = xA[i,j] = False if X[i,j] != x- Here, you don’t need to consider cases where there are several maxima in a matrix.12345678910111213141516def create_mask_from_window(x): \"\"\" Creates a mask from an input matrix x, to identify the max entry of x. Arguments: x -- Array of shape (f, f) Returns: mask -- Array of the same shape as window, contains a True at the position corresponding to the max entry of x. \"\"\" ### START CODE HERE ### (≈1 line) mask = (x == np.max(x)) ### END CODE HERE ### return mask12345np.random.seed(1)x = np.random.randn(2,3)mask = create_mask_from_window(x)print('x = ', x)print(\"mask = \", mask)Expected Output:x =[[ 1.62434536 -0.61175641 -0.52817175] [-1.07296862 0.86540763 -2.3015387 ]] mask =[[ True False False] [False False False]] Why do we keep track of the position of the max? It’s because this is the input value that ultimately influenced the output, and therefore the cost. Backprop is computing gradients with respect to the cost, so anything that influences the ultimate cost should have a non-zero gradient. So, backprop will “propagate” the gradient back to this particular input value that had influenced the cost. 5.2.2 - Average pooling - backward passIn max pooling, for each input window, all the “influence” on the output came from a single input value–the max. In average pooling, every element of the input window has equal influence on the output. So to implement backprop, you will now implement a helper function that reflects this. For example if we did average pooling in the forward pass using a 2x2 filter, then the mask you’ll use for the backward pass will look like:$$ dZ = 1 \\quad \\rightarrow \\quad dZ =\\begin{bmatrix}1/4 &amp;&amp; 1/4 \\1/4 &amp;&amp; 1/4\\end{bmatrix}\\tag{5}$$ This implies that each position in the $dZ$ matrix contributes equally to output because in the forward pass, we took an average. Exercise: Implement the function below to equally distribute a value dz through a matrix of dimension shape. Hint 123456789101112131415161718192021222324def distribute_value(dz, shape): \"\"\" Distributes the input value in the matrix of dimension shape Arguments: dz -- input scalar shape -- the shape (n_H, n_W) of the output matrix for which we want to distribute the value of dz Returns: a -- Array of size (n_H, n_W) for which we distributed the value of dz \"\"\" ### START CODE HERE ### # Retrieve dimensions from shape (≈1 line) (n_H, n_W) = shape # Compute the value to distribute on the matrix (≈1 line) average = dz / (n_H * n_W) # Create a matrix where every entry is the \"average\" value (≈1 line) a = np.zeros(shape) + average ### END CODE HERE ### return a 12a = distribute_value(2, (2,2))print('distributed value =', a) Expected Output: distributed_value =[[ 0.5 0.5][ 0.5 0.5]] 5.2.3 Putting it together: Pooling backwardYou now have everything you need to compute backward propagation on a pooling layer. Exercise: Implement the pool_backward function in both modes (&quot;max&quot; and &quot;average&quot;). You will once again use 4 for-loops (iterating over training examples, height, width, and channels). You should use an if/elif statement to see if the mode is equal to &#39;max&#39; or &#39;average&#39;. If it is equal to ‘average’ you should use the distribute_value() function you implemented above to create a matrix of the same shape as a_slice. Otherwise, the mode is equal to ‘max‘, and you will create a mask with create_mask_from_window() and multiply it by the corresponding value of dZ. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869def pool_backward(dA, cache, mode = \"max\"): \"\"\" Implements the backward pass of the pooling layer Arguments: dA -- gradient of cost with respect to the output of the pooling layer, same shape as A cache -- cache output from the forward pass of the pooling layer, contains the layer's input and hparameters mode -- the pooling mode you would like to use, defined as a string (\"max\" or \"average\") Returns: dA_prev -- gradient of cost with respect to the input of the pooling layer, same shape as A_prev \"\"\" ### START CODE HERE ### # Retrieve information from cache (≈1 line) (A_prev, hparameters) = cache # Retrieve hyperparameters from \"hparameters\" (≈2 lines) stride = hparameters['stride'] f = hparameters['f'] # Retrieve dimensions from A_prev's shape and dA's shape (≈2 lines) m, n_H_prev, n_W_prev, n_C_prev = A_prev.shape m, n_H, n_W, n_C = dA.shape # Initialize dA_prev with zeros (≈1 line) dA_prev = np.zeros(A_prev.shape) for i in range(m): # loop over the training examples # select training example from A_prev (≈1 line) a_prev = A_prev[i] for h in range(n_H): # loop on the vertical axis for w in range(n_W): # loop on the horizontal axis for c in range(n_C): # loop over the channels (depth) # Find the corners of the current \"slice\" (≈4 lines) vert_start = h * stride vert_end = vert_start + f horiz_start = w * stride horiz_end = horiz_start + f # Compute the backward propagation in both modes. if mode == \"max\": # Use the corners and \"c\" to define the current slice from a_prev (≈1 line) a_prev_slice = a_prev[vert_start:vert_end,horiz_start:horiz_end,c] # Create the mask from a_prev_slice (≈1 line) mask = create_mask_from_window(a_prev_slice) # Set dA_prev to be dA_prev + (the mask multiplied by the correct entry of dA) (≈1 line) dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += dA[i, h, w, c] * mask elif mode == \"average\": # Get the value a from dA (≈1 line) da = dA[i, h, w, c] # Define the shape of the filter as fxf (≈1 line) shape = (f,f) # Distribute it to get the correct slice of dA_prev. i.e. Add the distributed value of da. (≈1 line) dA_prev[i, vert_start: vert_end, horiz_start: horiz_end, c] += distribute_value(da,shape) ### END CODE ### # Making sure your output shape is correct assert(dA_prev.shape == A_prev.shape) return dA_prev 123456789101112131415np.random.seed(1)A_prev = np.random.randn(5, 5, 3, 2)hparameters = &#123;\"stride\" : 1, \"f\": 2&#125;A, cache = pool_forward(A_prev, hparameters)dA = np.random.randn(5, 4, 2, 2)dA_prev = pool_backward(dA, cache, mode = \"max\")print(\"mode = max\")print('mean of dA = ', np.mean(dA))print('dA_prev[1,1] = ', dA_prev[1,1]) print()dA_prev = pool_backward(dA, cache, mode = \"average\")print(\"mode = average\")print('mean of dA = ', np.mean(dA))print('dA_prev[1,1] = ', dA_prev[1,1]) Expected Output: mode = max: mean of dA =0.145713902729 dA_prev[1,1] =[[ 0. 0. ] [ 5.05844394 -1.68282702] [ 0. 0. ]] mode = average mean of dA =0.145713902729 dA_prev[1,1] = [[ 0.08485462 0.2787552 ] [ 1.26461098 -0.25749373] [ 1.17975636 -0.53624893]] Congratulations !Congratulation on completing this assignment. You now understand how convolutional neural networks work. You have implemented all the building blocks of a neural network. In the next assignment you will implement a ConvNet using TensorFlow.","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"https://www.zuoyangblog.com/categories/Deep-Learning/"}],"tags":[{"name":"CNN, Deep Learning","slug":"CNN-Deep-Learning","permalink":"https://www.zuoyangblog.com/tags/CNN-Deep-Learning/"}]},{"title":"手动部署ceph集群","slug":"manual-deploy-ceph","date":"2018-11-15T07:54:19.000Z","updated":"2018-11-15T14:56:49.000Z","comments":true,"path":"post/c3d7e91e.html","link":"","permalink":"https://www.zuoyangblog.com/post/c3d7e91e.html","excerpt":"","text":"1、机器选择1.1 系统要求ceph 最新 LTS 版本 (luminous) 推荐 linux 内核版本 4.1.4 及以上, 最低版本要求 3.10.*。 1.2 服务器这里选择三台服务器来部署ceph集群，一台Mon+五台OSD 节点 服务 cluster network public network 192.168.226.20 osd.1,mon.node2 192.168.226.0/24 192.168.226.0/24 192.168.226.21 osd.4 192.168.226.0/24 192.168.226.0/24 192.168.226.22 osd.2, mon.node1 192.168.226.0/24 192.168.226.0/24 192.168.226.96 osd.3,mon.node3 192.168.226.0/24 192.168.226.0/24 192.168.226.106 osd.0 192.168.226.0/24 192.168.226.0/24 每个节点只能使用1块磁盘部署osd。所以，集群共有5个osd进程，3个monitor进程。 cluster network 是处理osd间的数据复制，数据重平衡，osd进程心跳检测的网络，其不对外提供服务，只在各个osd节点间通信，本文使用eth1网卡作为cluster network，三个节点网卡eth1桥接到同一个网桥br1上 2、环境配置配置每个节点的host文件，在 /etc/hosts文件中添加如下内容： 123192.168.226.20 ceph-1192.168.226.22 ceph-2192.168.226.96 ceph-3 2.2 ceph节点安装你的管理节点必须能够通过 SSH 无密码地访问各 Ceph 节点。如果 ceph-deploy 以某个普通用户登录，那么这个用户必须有无密码使用 sudo 的权限。 2.2.1 安装 NTP我们建议在所有 Ceph 节点上安装 NTP 服务（特别是 Ceph Monitor 节点），以免因时钟漂移导致故障，详情见时钟。 1sudo yum install ntp ntpdate ntp-doc 确保在各 Ceph 节点上启动了 NTP 服务，并且要使用同一个 NTP 服务器，详情见 NTP 。 2.2.2 安装 SSH 服务器在所有 Ceph 节点上执行如下步骤： 在各 Ceph 节点安装 SSH 服务器（如果还没有） 1sudo yum install openssh-server 确保所有 Ceph 节点上的 SSH 服务器都在运行。 2.2.3 安装ceph由于蚂蚁内部物理机不能访问外网，使用以下步骤安装ceph。 在所有Ceph节点上执行如下步骤： 下载ceph所有的依赖rpm，并解压缩 12sudo wget http://qianli-lzh.oss-cn-hangzhou-zmf.aliyuncs.com/bill_inference_public%2Fceph.tarsudo tar -xvf bill_inference_public%2Fceph.tar 手动安装所有的rpm 1sudo rpm -ivh --force --nodeps ceph/*.rpm 验证ceph是否正确安装 12ceph -vceph version 12.2.8 (ae699615bac534ea496ee965ac6192cb7e0e07c0) luminous (stable) 2.2.4 关闭防火墙1234sudo sed -i 's/SELINUX=.*/SELINUX=disabled/' /etc/selinux/configsudo setenforce 0sudo systemctl stop firewalld sudo systemctl disable firewalld 3、集群搭建3.1 搭建Mon集群 (使用admin账户)创建配置文件 在每台节点机器上创建配置文件/etc/ceph/ceph.conf： 123456789101112131415161718192021222324252627[global]fsid = 932XXXXX-fba7-XXXX-9526-a858c613f468mon initial members = e15p13447.ew9mon host = 192.168.226.20,192.168.226.22,192.168.226.96rbd default features = 1auth_cluster_required = noneauth_service_required = noneauth_client_required = nonepublic network = 192.168.226.0/24cluster network = 192.168.226.0/24osd journal size = 1024osd pool default size = 2osd pool default min size = 1osd pool default pg num = 128osd pool default pgp num = 128osd crush chooseleaf type = 1mon_max_pg_per_osd = 200[mds.ceph-1]host = ceph-1[mds.ceph-2]host = ceph-2[mds.ceph-3]host = ceph-3[mon]mon allow pool delete = true 其中 fsid 是为集群分配的一个 uuid, 初始化 mon 节点其实只需要这一个配置就够了。mon host 配置 ceph 命令行工具访问操作 ceph 集群时查找 mon 节点入口。ceph 集群可包含多个 mon 节点实现高可用容灾, 避免单点故障。rbd default features = 1 配置 rbd 客户端创建磁盘时禁用一些需要高版本内核才能支持的特性。 3.1.2 主mon节点 （192.168.226.20）1、为此集群创建密钥环、并生成Monitor密钥 (3台机器一样) 1sudo ceph-authtool --create-keyring /tmp/ceph.mon.keyring --gen-key -n mon. --cap mon 'allow *' 2、生成管理员密钥环，生成 client.admin 用户并加入密钥环 (3台机器一样) 1sudo ceph-authtool --create-keyring /etc/ceph/ceph.client.admin.keyring --gen-key -n client.admin --set-uid=0 --cap mon 'allow *' --cap osd 'allow *' --cap mds 'allow *' --cap mgr 'allow *' 3、把 client.admin 密钥加入 ceph.mon.keyring (3台机器一样) 1sudo ceph-authtool /tmp/ceph.mon.keyring --import-keyring /etc/ceph/ceph.client.admin.keyring 4、用规划好的主机名、对应 IP 地址、和 FSID 生成一个Monitor Map，并保存为 /tmp/monmap 12host_name=`hostname`sudo monmaptool --create --add $host_name 192.168.226.20 --fsid 932XXXXX-fba7-XXXX-9526-a858c613f468 /tmp/monmap --clobber 5、在Monitor主机上分别创建数据目录 123host_name=`hostname`#在admin账户下sudo mkdir /var/lib/ceph/mon/ceph-$host_name/ 6、用Monitor Map和密钥环组装守护进程所需的初始数据 1sudo ceph-mon --mkfs -i $host_name --monmap /tmp/monmap --keyring /tmp/ceph.mon.keyring 7、建一个空文件 done ，表示监视器已创建、可以启动了 1sudo touch /var/lib/ceph/mon/ceph-$host_name/done 8、启动Monitor 1234#sudo ceph-mon -f --cluster ceph --id $host_name &amp;sudo cp /usr/lib/systemd/system/ceph-mon@.service /usr/lib/systemd/system/ceph-mon@$host_name.servicesudo systemctl start ceph-mon@$host_namesudo systemctl enable ceph-mon@$host_name 9、确认下集群在运行 1ceph -s 事例： 1234567891011121314cluster: id: 932XXXXX-fba7-XXXX-9526-a858c613f468 health: HEALTH_OK services: mon: 3 daemons, quorum ceph-1,ceph-2,ceph-3 mgr: no daemons active osd: 0 osds: 0 up, 0 in data: pools: 0 pools, 0 pgs objects: 0 objects, 0B usage: 0B used, 0B / 0B avail pgs: 3.1.2 从mon节点 (192.168.226.22 &amp; 192.168.226.96)12345678910host_name=`hostname`sudo ceph mon getmap -o /tmp/monmapsudo rm -rf /var/lib/ceph/mon/ceph-$host_namesudo ceph-mon -i $host_name --mkfs --monmap /tmp/monmapsudo chown -R ceph:ceph /var/lib/ceph/mon/ceph-$host_name/#nohup ceph-mon -f --cluster ceph --id $host_name --setuser ceph --setgroup ceph &amp;#ceph-mon -f --cluster ceph --id $host_name &amp;sudo cp /usr/lib/systemd/system/ceph-mon@.service /usr/lib/systemd/system/ceph-mon@$host_name.servicesudo systemctl start ceph-mon@$host_namesudo systemctl enable ceph-mon@$host_name 3.2 创建ceph-mgr3.2.1 创建用户 openstack 用于 MGR 监控1234ceph auth get-or-create mgr.openstack mon 'allow *' osd 'allow *' mds 'allow *'输出：[mgr.openstack] key = xxxxxxxxxxxxxxxxxxxxxxxxxxxxxugvXkLfgauLA== 需要将之前创建的用户密码存放至对应位置 123mkdir /var/lib/ceph/mgr/ceph-openstackceph auth get mgr.openstack -o /var/lib/ceph/mgr/ceph-openstack/keyringexported keyring for mgr.openstack 3.2.2 启动mgr1ceph-mgr -i openstack 监控状态 12345678910111213141516$ceph -s cluster: id: 932e88a6-fba7-45a9-9526-a858c613f468 health: HEALTH_OK services: mon: 3 daemons, quorum ceph-1,ceph-2,ceph-3 mgr: openstack(active) mds: cephfs-1/1/1 up &#123;0=2=up:active&#125;, 2 up:standby osd: 3 osds: 3 up, 3 in data: pools: 2 pools, 256 pgs objects: 21 objects, 3.04KiB usage: 3.32GiB used, 1.17TiB / 1.17TiB avail pgs: 256 active+clean 当 mgr 服务被激活之后, service 中 mgr 会显示 mgr-$name(active)data 部分信息将变得可用 3.3 手动搭建osd集群(三台机器上做相同的操作，注意osd_id的变化)添加一个新osd，id可以省略，ceph会自动使用最小可用整数，第一个osd从0开始 123#ceph osd create &#123;id&#125;ceph osd create0 3.3.1 初始化osd目录创建osd.0目录，目录名格式{cluster-name}-{id} 12#mkdir /var/lib/ceph/osd/&#123;cluster-name&#125;-&#123;id&#125;sudo mkdir /var/lib/ceph/osd/ceph-0 挂载osd.0的数据盘/dev/sdb2 12sudo mkfs.xfs /dev/sdb2sudo mount /dev/sdb2 /var/lib/ceph/osd/ceph-0 初始化osd数据目录 1234# sudo ceph-osd -i &#123;id&#125; --mkfs --mkkeysudo ceph-osd -i 0 --mkfs --mkkey#--mkkey要求osd数据目录为空#这会创建osd.0的keyring /var/lib/ceph/osd/ceph-0/keyring 初始化后，默认使用普通文件/var/lib/ceph/osd/ceph-3/journal作为osd.0的journal分区，普通文件作为journal分区性能不高，若只是测试环境，可以跳过更改journal分区这一步骤 3.3.2 创建journal生成journal分区，一般选ssd盘作为journal分区，这里使用ssd的/dev/sdb1分区作为journal 使用fdisk工分出磁盘/dev/sdb1, 1234567891011121314151617181920#清除磁盘所有分区(重新添加时需要)#sgdisk --zap-all --clear --mbrtogpt /dev/sdb#生成分区/dev/sdb1的uuid#uuidgen#b3897364-8807-48eb-9905-e2c8400d0cd4#创建分区#1:0:+100G 表示创建第一个分区，100G大小#sudo sgdisk --new=1:0:+100G --change-name=1:'ceph journal' --partition-guid=1:b3897364-8807-48eb-9905-e2c8400d0cd4 --typecode=1:b3897364-8807-48eb-9905-e2c8400d0cd4 --mbrtogpt -- /dev/vdf#格式化sudo mkfs.xfs /dev/sdb1sudo rm -f /var/lib/ceph/osd/ceph-4/journal #查看分区对应的partuuid， 找出/dev/sdb1对应的partuuidsudo blkidsudo ln -s /dev/disk/by-partuuid/b3897364-8807-48eb-9905-e2c8400d0cd4 /var/lib/ceph/osd/ceph-0/journalsudo chown ceph:ceph -R /var/lib/ceph/osd/ceph-0sudo chown ceph:ceph /var/lib/ceph/osd/ceph-0/journal#初始化新的journalsudo ceph-osd --mkjournal -i 0sudo chown ceph:ceph /var/lib/ceph/osd/ceph-0/journal 3.3.3 注册osd.{id}，id为osd编号，默认从0开始123# sudo ceph auth add osd.&#123;id&#125; osd 'allow *' mon 'allow profile osd' -i /var/lib/ceph/osd/ceph-&#123;id&#125;/keyringsudo ceph auth add osd.0 osd 'allow *' mon 'allow profile osd' -i /var/lib/ceph/osd/ceph-0/keyring#ceph auth list 中出现osd.0 3.3.4 加入crush map这是m1上新创建的第一个osd，CRUSH map中还没有m1节点，因此首先要把m1节点加入CRUSH map，同理，m2/m3节点也需要加入CRUSH map 12#ceph osd crush add-bucket &#123;hostname&#125; hostsudo ceph osd crush add-bucket `hostname` host 然后把三个节点移动到默认的root default下面 1sudo ceph osd crush move `hostname` root=default 添加osd.0到CRUSH map中的m1节点下面，加入后，osd.0就能够接收数据 123#ceph osd crush add osd.&#123;id&#125; 0.4 root=sata rack=sata-rack01 host=sata-node5sudo ceph osd crush add osd.4 1.7 root=default host=`hostname`#0.4为此osd在CRUSH map中的权重值，它表示数据落在此osd上的比重，是一个相对值，一般按照1T磁盘比重值为1来计算，这里的osd数据盘1.7，所以值为1.7 此时osd.0状态是down且in，in表示此osd位于CRUSH map，已经准备好接受数据，down表示osd进程运行异常，因为我们还没有启动osd.0进程 3.3.5 启动ceph-osd进程需要向systemctl传递osd的id以启动指定的osd进程，如下，我们准备启动osd.0进程 12345#systemctl start ceph-osd@&#123;id&#125; id表示osd编号，从数字0开始sudo cp /usr/lib/systemd/system/ceph-osd@.service /usr/lib/systemd/system/ceph-osd@0.servicesudo systemctl start ceph-osd@0sudo systemctl enable ceph-osd@0#sudo ceph-osd -i 0 上面就是添加osd.0的步骤，然后可以接着在其他hostname节点上添加osd.{1,2}，添加了这3个osd后，可以查看集群状态 ceph -s。 3.4 搭建MDS创建目录： 12sudo mkdir /var/lib/ceph/mds/ceph-`hostname`sudo chown ceph:ceph -R /var/lib/ceph/mds/ceph-`hostname` 在ceph.conf中添加如下信息： 12345[mds.&#123;id&#125;]host = &#123;id&#125;例如：[mds.0]host = 0 启动mds 12345#ceph-mds --cluster &#123;cluster-name&#125; -i &#123;id&#125; -m &#123;mon-hostname&#125;:&#123;mon-port&#125; [-f]sudo cp /usr/lib/systemd/system/ceph-mds@.service /usr/lib/systemd/system/ceph-mds@`hostname`.service sudo systemctl start ceph-mds@`hostname`sudo systemctl enable ceph-mds@`hostname`#ceph-mds --cluster ceph -i 0 -m e15p13447.ew9:6789 查看mds状态 12ceph mds statcephfs-1/1/1 up &#123;0=1=up:active&#125;, 2 up:standby 至此ceph集群搭建完成。","categories":[{"name":"ceph","slug":"ceph","permalink":"https://www.zuoyangblog.com/categories/ceph/"}],"tags":[{"name":"ceph","slug":"ceph","permalink":"https://www.zuoyangblog.com/tags/ceph/"}]}]}